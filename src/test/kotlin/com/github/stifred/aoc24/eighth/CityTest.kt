package com.github.stifred.aoc24.eighth

import com.github.stifred.aoc24.shared.Position
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test

class CityTest {
  @Test
  fun `parse city`() {
    val str = """
      ..........
      ..........
      ..........
      ....a.....
      ..........
      .....b....
      ..........
      ..........
      ..........
      ..........
    """.trimIndent()

    val actual = str.toCity()

    assertEquals(Position(0, 0), actual.min)
    assertEquals(Position(9, 9), actual.max)
    assertEquals(2, actual.antennas.size)
    assertEquals(Antenna(pos = Position(4, 3), frequency = 'a'), actual.antennas[0])
    assertEquals(Antenna(pos = Position(5, 5), frequency = 'b'), actual.antennas[1])
  }

  @Test
  fun `two antenna in one pair`() {
    val expected = listOf(
      Antenna(pos = Position(4, 3), frequency = 'a') to Antenna(pos = Position(5, 5), frequency = 'a'),
    )

    val actual = """
      ..........
      ..........
      ..........
      ....a.....
      ..........
      .....a....
      ..........
      ..........
      ..........
      ..........
    """.trimIndent().toCity().antennaPairs

    assertEquals(expected, actual)
  }

  @Test
  fun `three antennas form three pairs`() {
    val expected = listOf(
      Antenna(pos = Position(4, 3), frequency = 'a') to Antenna(pos = Position(8, 4), frequency = 'a'),
      Antenna(pos = Position(4, 3), frequency = 'a') to Antenna(pos = Position(5, 5), frequency = 'a'),
      Antenna(pos = Position(8, 4), frequency = 'a') to Antenna(pos = Position(5, 5), frequency = 'a'),
    )

    val actual = """
      ..........
      ..........
      ..........
      ....a.....
      ........a.
      .....a....
      ..........
      ..........
      ..........
      ..........
    """.trimIndent().toCity().antennaPairs

    assertEquals(expected, actual)
  }
}
